name: GitHub Actions
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [ push ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'

      - name: Install Goose CLI
        run: |
          go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Install Dependencies
        run: |
          go mod tidy
          go mod download

      - name: Run Goose Migrations
        run: |
          export GOOSE_DRIVER=postgres
          export GOOSE_DBSTRING="postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/flink?sslmode=disable"
          export GOOSE_MIGRATION_DIR=./migrations
          goose up

      - name: Build Go App
        run: |
          go build -o backend-task ./cmd/api

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Log in to Amazon ECR
        run: |
          docker login -u AWS -p $(aws ecr get-login-password --region eu-north-1) ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/flink/backend-task:latest .


      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/flink/backend-task:latest



      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            
            ls -a

            # Log in to ECR
            sudo aws ecr get-login-password --region eu-north-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com
            
            # Pull the Docker image from Amazon ECR
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/flink/backend-task:latest

            
            
            # Stop any existing backend container running on port 8080
            container_id=$(sudo docker ps -q -f "publish=8080")
            if [ ! -z "$container_id" ]; then
              # Stop the container
              sudo docker stop $container_id
              # Remove the container
              sudo docker rm $container_id
            fi

        
            sudo docker run --network my-network -d -p 8080:8080 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/flink/backend-task:latest